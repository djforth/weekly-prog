/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$envelope-name: 'envelope';
$envelope-x: 0px;
$envelope-y: 0px;
$envelope-offset-x: 0px;
$envelope-offset-y: 0px;
$envelope-width: 41px;
$envelope-height: 41px;
$envelope-total-width: 82px;
$envelope-total-height: 82px;
$envelope-image: 'sprites/social-icons.png';
$envelope: (0px, 0px, 0px, 0px, 41px, 41px, 82px, 82px, 'sprites/social-icons.png', 'envelope', );
$facebook-name: 'facebook';
$facebook-x: 41px;
$facebook-y: 0px;
$facebook-offset-x: -41px;
$facebook-offset-y: 0px;
$facebook-width: 41px;
$facebook-height: 41px;
$facebook-total-width: 82px;
$facebook-total-height: 82px;
$facebook-image: 'sprites/social-icons.png';
$facebook: (41px, 0px, -41px, 0px, 41px, 41px, 82px, 82px, 'sprites/social-icons.png', 'facebook', );
$twitter-name: 'twitter';
$twitter-x: 0px;
$twitter-y: 41px;
$twitter-offset-x: 0px;
$twitter-offset-y: -41px;
$twitter-width: 41px;
$twitter-height: 41px;
$twitter-total-width: 82px;
$twitter-total-height: 82px;
$twitter-image: 'sprites/social-icons.png';
$twitter: (0px, 41px, 0px, -41px, 41px, 41px, 82px, 82px, 'sprites/social-icons.png', 'twitter', );
$spritesheet-width: 82px;
$spritesheet-height: 82px;
$spritesheet-image: 'sprites/social-icons.png';
$spritesheet-sprites: ($envelope, $facebook, $twitter, );
$spritesheet: (82px, 82px, 'sprites/social-icons.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: image-url('#{$sprite-image}');
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
/*
Icon classes can be used entirely standalone. They are named after their original file names.

```html
<!-- `display: block` sprite -->
<div class="icon-home"></div>

<!-- `display: inline-block` sprite -->
<img class="icon-home" />
```
*/
.icon-envelope {
  background-image: image-url('sprites/social-icons.png');
  background-position: 0px 0px;
  width: 41px;
  height: 41px;
}
.icon-facebook {
  background-image: image-url('sprites/social-icons.png');
  background-position: -41px 0px;
  width: 41px;
  height: 41px;
}
.icon-twitter {
  background-image: image-url('sprites/social-icons.png');
  background-position: 0px -41px;
  width: 41px;
  height: 41px;
}
