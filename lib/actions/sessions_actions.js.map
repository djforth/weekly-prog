{"version":3,"sources":["../../src/actions/sessions_actions.js"],"names":[],"mappings":";;;;;;;AAKC,IAAM,qBAAqB,QAAQ,oCAAR,CAArB;;;;;;;;;AASP,IAAI,aAAa,SAAb,UAAa,CAAC,IAAD,EAAQ;AACvB,qBAAmB,UAAnB,CAA8B;AAC5B,UAAM,aAAN;AACA,UAAK,IAAL;GAFF,EADuB;CAAR;;;;;;;;;AAcjB,IAAI,iBAAiB,SAAjB,cAAiB,CAAC,IAAD,EAAQ;AAC3B,qBAAmB,cAAnB,CAAkC;AAChC,UAAM,iBAAN;AACA,UAAK,IAAL;GAFF,EAD2B;CAAR;;;;;;;;;AAcrB,IAAI,YAAY,SAAZ,SAAY,CAAC,QAAD,EAAW,IAAX,EAAkB;AAChC,qBAAmB,SAAnB,CAA6B;AAC3B,UAAM,YAAN;AACA,cAAS,QAAT;AACA,UAAK,IAAL;GAHF,EADgC;CAAlB;;;;;;;;AAchB,IAAI,eAAe,SAAf,YAAe,CAAC,QAAD,EAAY;AAC3B,qBAAmB,YAAnB,CAAgC;AAC9B,UAAM,eAAN;AACA,cAAS,QAAT;GAFF,EAD2B;CAAZ;;;;;;;AAYnB,IAAI,cAAc,SAAd,WAAc,GAAI;AACpB,qBAAmB,WAAnB,CAA+B;AAC7B,UAAM,WAAN;GADF,EADoB;CAAJ;;;;;;;AAWlB,IAAI,kBAAkB,SAAlB,eAAkB,CAAC,IAAD,EAAQ;AAC5B,qBAAmB,eAAnB,CAAmC;AACjC,UAAM,eAAN;AACA,UAAM,IAAN;GAFF,EAD4B;CAAR;;;;;;;;AAatB,IAAI,gBAAgB,SAAhB,aAAgB,CAAC,IAAD,EAAQ;AAC1B,qBAAmB,aAAnB,CAAiC;AAC/B,UAAM,gBAAN;AACA,UAAM,IAAN;GAFF,EAD0B;CAAR;;;;;;;;AAapB,IAAI,SAAS,SAAT,MAAS,CAAC,GAAD,EAAO;AAClB,qBAAmB,MAAnB,CAA0B;AACxB,UAAO,SAAP;AACA,SAAO,GAAP;GAFF,EADkB;CAAP;;;;;;;;AAab,IAAI,cAAc,SAAd,WAAc,CAAC,EAAD,EAAM;AACtB,qBAAmB,WAAnB,CAA+B;AAC7B,UAAO,cAAP;AACA,QAAO,EAAP;GAFF,EADsB;CAAN;;;;;;;;AAalB,IAAI,aAAa,SAAb,UAAa,CAAC,OAAD,EAAW;AAC1B,qBAAmB,UAAnB,CAA8B;AAC5B,UAAM,aAAN;AACA,aAAS,OAAT;GAFF,EAD0B;CAAX;;AAOjB,OAAO,OAAP,GAAiB;AACb,cAAW,UAAX;AACA,kBAAe,cAAf;AACA,aAAU,SAAV;AACA,gBAAa,YAAb;AACA,eAAY,WAAZ;AACA,mBAAiB,eAAjB;AACA,iBAAc,aAAd;AACA,UAAO,MAAP;AACA,eAAY,WAAZ;AACA,cAAW,UAAX;CAVJ","file":"sessions_actions.js","sourcesContent":[" /**\n * Weekly programme module.\n * @module  weekly-prog/actions/sessions_actions\n*/\n\n const SessionsDispatcher = require(\"../dispatchers/sessions_dispatcher\");\n\n/**\n  * This will change current date in sessions store\n  * @type {function}\n  * @param {date} date (required).\n  * @return {} returns nothing\n  */\n\nvar changeDate = (date)=>{\n  SessionsDispatcher.changeDate({\n    type: \"CHANGE_DATE\",\n    date:date\n  });\n}\n\n/**\n  * This will change current date in sessions store from calendar\n  * @type {function}\n  * @param {date} date (required).\n  * @return {} returns nothing\n  */\n\nvar calendarChange = (date)=>{\n  SessionsDispatcher.calendarChange({\n    type: \"CALENDAR_CHANGE\",\n    date:date\n  });\n}\n\n/**\n  * Will fetch data\n  * @type {function}\n  * @param {progress} function - tracks loading.\n  * @param {date} date, to add to query string.\n  * @return {} returns nothing\n  */\nvar fetchData = (progress, date)=>{\n  SessionsDispatcher.fetchData({\n    type: \"FETCH_DATA\",\n    progress:progress,\n    date:date\n  });\n}\n\n/**\n  * Will fetch now/next data\n  * @type {function}\n  * @param {progress} function - tracks loading.\n  * @return {} returns nothing\n  */\nvar fetchNowNext = (progress)=>{\n    SessionsDispatcher.fetchNowNext({\n      type: \"FETCH_NOWNEXT\",\n      progress:progress\n    });\n  }\n\n/**\n  * Will get the following days data\n  * @type {function}\n  * @return {} returns nothing\n  */\nvar getMoreDays = ()=>{\n  SessionsDispatcher.getMoreDays({\n    type: \"MORE_DAYS\"\n  });\n}\n\n/**\n  * Will get the previous days data\n  * @type {function}\n  * @return {} returns nothing\n  */\nvar getPreviousDays = (date)=>{\n  SessionsDispatcher.getPreviousDays({\n    type: \"PREVIOUS_DAYS\",\n    date: date\n  });\n}\n\n/**\n  * Will add prerender data to store\n  * @type {function}\n  * @param {data} array\n  * @return {} returns nothing\n  */\nvar prerenderData = (data)=>{\n  SessionsDispatcher.prerenderData({\n    type: \"PRERENDER_DATA\",\n    data: data\n  });\n}\n\n/**\n  * Will set api\n  * @type {function}\n  * @param {string} url for api call\n  * @return {} returns nothing\n  */\nvar setApi = (url)=>{\n  SessionsDispatcher.setApi({\n    type : \"SET_API\",\n    url  : url\n  });\n}\n\n/**\n  * Will set facility in store (for now/next)\n  * @type {function}\n  * @param {number} id of facility\n  * @return {} returns nothing\n  */\nvar setFacility = (id)=>{\n  SessionsDispatcher.setFacility({\n    type : \"SET_FACILITY\",\n    id   : id\n  });\n}\n\n/**\n  * Will set groupby in store\n  * @type {function}\n  * @param {string} key\n  * @return {} returns nothing\n  */\nvar setGroupby = (groupBy)=>{\n  SessionsDispatcher.setGroupBy({\n    type: \"SET_GROUPBY\",\n    groupBy: groupBy\n  });\n}\n\nmodule.exports = {\n    changeDate:changeDate\n  , calendarChange:calendarChange\n  , fetchData:fetchData\n  , fetchNowNext:fetchNowNext\n  , getMoreDays:getMoreDays\n  , getPreviousDays: getPreviousDays\n  , prerenderData:prerenderData\n  , setApi:setApi\n  , setFacility:setFacility\n  , setGroupby:setGroupby\n}"]}