{"version":3,"sources":["../../src/actions/sessions_actions.js"],"names":["SessionsDispatcher","changeDate","date","type","calendarChange","fetchData","progress","fetchNowNext","getMoreDays","getPreviousDays","prerenderData","data","setApi","url","setFacility","id","setGroupby","groupBy","setGroupBy"],"mappings":"AAAC;;;;;AAMD,OAAOA,kBAAP,MAA+B,oCAA/B;;AAEA;;;;;;;AAOA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACvBF,qBAAmBC,UAAnB,CAA8B;AAC5BE,UAAM,aADsB;AAE1BD,UAAMA;AAFoB,GAA9B;AAID;;AAED;;;;;;;AAOA,SAASE,cAAT,CAAwBF,IAAxB,EAA6B;AAC3BF,qBAAmBI,cAAnB,CAAkC;AAChCD,UAAM,iBAD0B;AAE9BD,UAAMA;AAFwB,GAAlC;AAID;;AAED;;;;;;;AAOA,SAASG,SAAT,CAAmBC,QAAnB,EAA6BJ,IAA7B,EAAkC;AAChCF,qBAAmBK,SAAnB,CAA6B;AAC3BF,UAAM,YADqB;AAEzBG,cAAUA,QAFe;AAGzBJ,UAAMA;AAHmB,GAA7B;AAKD;;AAED;;;;;;AAMA,SAASK,YAAT,CAAsBD,QAAtB,EAA+B;AAC7BN,qBAAmBO,YAAnB,CAAgC;AAC9BJ,UAAM,eADwB;AAE3BG,cAAUA;AAFiB,GAAhC;AAID;;AAED;;;;;AAKA,SAASE,WAAT,GAAsB;AACpBR,qBAAmBQ,WAAnB,CAA+B;AAC7BL,UAAM;AADuB,GAA/B;AAGD;;AAED;;;;;AAKA,SAASM,eAAT,CAAyBP,IAAzB,EAA8B;AAC5BF,qBAAmBS,eAAnB,CAAmC;AACjCN,UAAM,eAD2B;AAE/BD,UAAMA;AAFyB,GAAnC;AAID;;AAED;;;;;;AAMA,SAASQ,aAAT,CAAuBC,IAAvB,EAA4B;AAC1BX,qBAAmBU,aAAnB,CAAiC;AAC/BP,UAAM,gBADyB;AAE7BQ,UAAMA;AAFuB,GAAjC;AAID;;AAED;;;;;;AAMA,SAASC,MAAT,CAAgBC,GAAhB,EAAoB;AAClBb,qBAAmBY,MAAnB,CAA0B;AACxBT,UAAM,SADkB;AAEtBU,SAAKA;AAFiB,GAA1B;AAID;;AAED;;;;;;AAMA,SAASC,WAAT,CAAqBC,EAArB,EAAwB;AACtBf,qBAAmBc,WAAnB,CAA+B;AAC7BX,UAAM,cADuB;AAE3BY,QAAIA;AAFuB,GAA/B;AAID;;AAED;;;;;;AAMA,SAASC,UAAT,CAAoBC,OAApB,EAA4B;AAC1BjB,qBAAmBkB,UAAnB,CAA8B;AAC5Bf,UAAM,aADsB;AAE1Bc,aAASA;AAFiB,GAA9B;AAID;;AAED,eAAe;AACbhB,cAAYA,UADC;AAEXG,kBAAgBA,cAFL;AAGXC,aAAWA,SAHA;AAIXE,gBAAcA,YAJH;AAKXC,eAAaA,WALF;AAMXC,mBAAiBA,eANN;AAOXC,iBAAeA,aAPJ;AAQXE,UAAQA,MARG;AASXE,eAAaA,WATF;AAUXE,cAAYA;AAVD,CAAf","file":"sessions_actions.js","sourcesContent":[" /**\n * Weekly programme module.\n * @module  weekly-prog/actions/sessions_actions\n*/\n\n\nimport SessionsDispatcher from '../dispatchers/sessions_dispatcher';\n\n/**\n  * This will change current date in sessions store\n  * @type {function}\n  * @param {date} date (required).\n  * @return {} returns nothing\n  */\n\nfunction changeDate(date){\n  SessionsDispatcher.changeDate({\n    type: 'CHANGE_DATE'\n    , date: date\n  });\n}\n\n/**\n  * This will change current date in sessions store from calendar\n  * @type {function}\n  * @param {date} date (required).\n  * @return {} returns nothing\n  */\n\nfunction calendarChange(date){\n  SessionsDispatcher.calendarChange({\n    type: 'CALENDAR_CHANGE'\n    , date: date\n  });\n}\n\n/**\n  * Will fetch data\n  * @type {function}\n  * @param {progress} function - tracks loading.\n  * @param {date} date, to add to query string.\n  * @return {} returns nothing\n  */\nfunction fetchData(progress, date){\n  SessionsDispatcher.fetchData({\n    type: 'FETCH_DATA'\n    , progress: progress\n    , date: date\n  });\n}\n\n/**\n  * Will fetch now/next data\n  * @type {function}\n  * @param {progress} function - tracks loading.\n  * @return {} returns nothing\n  */\nfunction fetchNowNext(progress){\n  SessionsDispatcher.fetchNowNext({\n    type: 'FETCH_NOWNEXT'\n    ,  progress: progress\n  });\n}\n\n/**\n  * Will get the following days data\n  * @type {function}\n  * @return {} returns nothing\n  */\nfunction getMoreDays(){\n  SessionsDispatcher.getMoreDays({\n    type: 'MORE_DAYS'\n  });\n}\n\n/**\n  * Will get the previous days data\n  * @type {function}\n  * @return {} returns nothing\n  */\nfunction getPreviousDays(date){\n  SessionsDispatcher.getPreviousDays({\n    type: 'PREVIOUS_DAYS'\n    , date: date\n  });\n}\n\n/**\n  * Will add prerender data to store\n  * @type {function}\n  * @param {data} array\n  * @return {} returns nothing\n  */\nfunction prerenderData(data){\n  SessionsDispatcher.prerenderData({\n    type: 'PRERENDER_DATA'\n    , data: data\n  });\n}\n\n/**\n  * Will set api\n  * @type {function}\n  * @param {string} url for api call\n  * @return {} returns nothing\n  */\nfunction setApi(url){\n  SessionsDispatcher.setApi({\n    type: 'SET_API'\n    , url: url\n  });\n}\n\n/**\n  * Will set facility in store (for now/next)\n  * @type {function}\n  * @param {number} id of facility\n  * @return {} returns nothing\n  */\nfunction setFacility(id){\n  SessionsDispatcher.setFacility({\n    type: 'SET_FACILITY'\n    , id: id\n  });\n}\n\n/**\n  * Will set groupby in store\n  * @type {function}\n  * @param {string} key\n  * @return {} returns nothing\n  */\nfunction setGroupby(groupBy){\n  SessionsDispatcher.setGroupBy({\n    type: 'SET_GROUPBY'\n    , groupBy: groupBy\n  });\n}\n\nexport default {\n  changeDate: changeDate\n  , calendarChange: calendarChange\n  , fetchData: fetchData\n  , fetchNowNext: fetchNowNext\n  , getMoreDays: getMoreDays\n  , getPreviousDays: getPreviousDays\n  , prerenderData: prerenderData\n  , setApi: setApi\n  , setFacility: setFacility\n  , setGroupby: setGroupby\n};\n"]}