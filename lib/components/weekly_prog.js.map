{"version":3,"sources":["../../src/components/weekly_prog.jsx"],"names":["React","_","Moment","css_mixins","cssMixins","text_mixinsimport","textMixins","widths_mixins","widthsMixins","ViewportDetect","ColumnsActions","SessionsActions","SessionsStore","DateNav","PeriodSessions","TopBar","WeeklyProg","props","locale","locales","setGroupby","groupby","percent","state","sessions","keys","visible","device","removeChangeListener","_fetchData","defer","fetchData","session","_getDate","isEmpty","setState","date","data","map","timeperiod","tp","time","title","toLowerCase","addChangeListener","_getSessions","bind","ses","prerenderData","addingColumns","columns","changeDevice","detect","getDevice","size","windowSize","id","trackSize","_onDeviceChange","setApi","sessionsApi","removeCallback","print","_renderPeriodSessions","Component","Object","assign","prototype"],"mappings":"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","file":"weekly_prog.js","sourcesContent":["// Libraries\n\nimport React from 'react';\nimport _ from 'lodash/core';\nimport Moment from 'moment';\nimport 'moment/locale/cy';\n\n// Mixins\nimport {\n  css_mixins as cssMixins\n  , text_mixinsimport as textMixins\n  , widths_mixins as widthsMixins\n} from 'morse-react-mixins';\n\n// Morse Libraies\n\nimport ViewportDetect from 'viewport-detection-es6';\n\n// Flux\n\nimport ColumnsActions from '../actions/columns_actions';\n\nimport SessionsActions from '../actions/sessions_actions';\n\nimport SessionsStore from '../stores/sessions_store';\n\n// Components\n\nimport DateNav from './nav/date_nav';\n\nimport PeriodSessions from './sessions/period_sessions';\n\nimport TopBar from './topbar/top_bar';\n\nclass WeeklyProg extends React.Component{\n  constructor(props){\n    super(props);\n    Moment.locale(props.locales);\n    SessionsActions.setGroupby(this.props.groupby);\n\n    this.percent = 0;\n    this.state = {sessions: [], keys: [], visible: [], device: 'desktop'};\n  }\n\n  _fetchData(){\n    SessionsStore.removeChangeListener('api_set', this._fetchData);\n    _.defer(()=>{\n      SessionsActions.fetchData();\n    });\n  }\n\n  _getSessions(){\n    let session = SessionsStore._getDate();\n    if (!_.isEmpty(session)){\n      this.setState({date: session.date, sessions: session.data});\n    }\n  }\n\n  _renderPeriodSessions(){\n    return _.map(this.props.timeperiod, (tp)=>{\n      return (<PeriodSessions {...this.props}\n        devive   = {this.state.device}\n        sessions = {this.state.sessions}\n        time     = {tp.time}\n        title    = {tp.title}\n        key      = {tp.title.toLowerCase()} />);\n    });\n  }\n\n  componentWillMount(){\n    SessionsStore.addChangeListener('prerender', this._getSessions.bind(this));\n    let ses = (_.isEmpty(this.props.sessions)) ? [] : this.props.sessions;\n    SessionsActions.prerenderData(ses);\n    ColumnsActions.addingColumns(this.props.columns);\n    ColumnsActions.changeDevice(this.device);\n  }\n\n  componentDidMount(){\n    this.detect = new ViewportDetect();\n    this.device = this.detect.getDevice();\n    this.size  = this.detect.windowSize();\n    ColumnsActions.changeDevice(this.device);\n\n    this.id = this.detect.trackSize(this._onDeviceChange.bind(this));\n    SessionsStore.addChangeListener('api_set', this._fetchData.bind(this));\n    SessionsActions.setApi(this.props.sessionsApi);\n  }\n\n  componentWillUnmount(){\n    this.detect.removeCallback(this.id);\n    SessionsStore.removeChangeListener('prerender', this._getSessions);\n  }\n\n  _onDeviceChange(device, size){\n    if (this.device !== device){\n      this.device = device;\n      ColumnsActions.changeDevice(device);\n    }\n    this.size   = size;\n  }\n\n  render(){\n    return (\n      <div className=\"weekly-prog\">\n        <TopBar\n          device={this.state.device}\n          print={this.props.print}\n\n        />\n        <DateNav />\n        <div id=\"sessions\" className=\"clearfix\">\n          {this._renderPeriodSessions()}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nObject.assign(WeeklyProg.prototype, cssMixins);\nObject.assign(WeeklyProg.prototype, textMixins);\nObject.assign(WeeklyProg.prototype, widthsMixins);\n\nexport default WeeklyProg;\n"]}