{"version":3,"sources":["../../src/utils/time_checker.js"],"names":[],"mappings":";;;;AACA,IAAM,CAAC,GAAS,OAAO,CAAC,QAAQ,CAAC;IAC3B,MAAM,GAAI,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAGlC,SAAS,MAAK,CAAC,EAAE,EAAE,EAAE,EAAC;AACpB,MAAI,GAAG,GAAG,MAAM,EAAE,CAAC;AACnB,SACM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA,KAC9B,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA,AAAC,CACrC;CACT;;AAED,SAAS,OAAM,CAAC,EAAE,EAAC;AACjB,MAAI,GAAG,GAAG,MAAM,EAAE,CAAC;AACnB,SAAO,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;CACxB;;AAED,MAAM,CAAC,OAAO,GAAG,UAAS,IAAI,EAAE,GAAG,EAAC;AAClC,MAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,UAAC,CAAC,EAAE,CAAC,EAAG;AAC9B,WAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;GACzC,CAAC,CAAC;;iBACc,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;;;;MAA3B,GAAG;MAAE,GAAG;MACR,EAAE,GAAW,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;MAAtB,EAAE,GAAsB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC;;AAI9C,SAAO;AACH,SAAK,EAAC;aAAI,MAAK,CAAC,EAAE,EAAE,EAAE,CAAC;KAAA;AACvB,UAAM,EAAC;aAAK,OAAM,CAAC,EAAE,CAAC;KAAA;AACtB,gBAAY,EAAC,sBAAC,GAAG,EAAyB;UAAvB,IAAI,yDAAC,EAAE;UAAE,QAAQ,yDAAC,EAAE;;AACvC,UAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,MAAK,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,GAAG,CAAC;AAC/C,UAAG,OAAM,CAAC,EAAE,CAAC,EAAE,OAAO,IAAI,CAAC;AAC3B,aAAO,QAAQ,CAAC;KACjB;;GAEF,CAAA;CACF,CAAA","file":"time_checker.js","sourcesContent":["\nconst _       = require(\"lodash\")\n    , Moment  = require(\"moment\");\n\n\nfunction isNow(st, fn){\n  let now = Moment();\n  return (\n        (now.isAfter(st) || now.isSame(st))\n        && (now.isBefore(fn) || now.isSame(fn))\n        );\n}\n\nfunction isPast(fn){\n  let now = Moment();\n  return now.isAfter(fn);\n}\n\nmodule.exports = function(item, col){\n  let times = _.pick(col, (v, k)=>{\n    return _.includes([\"key\", \"concat\"], k);\n  });\n  var [stk, fnk] = _.values(times);\n  var [st, fn]   = [item.get(stk), item.get(fnk)]\n\n\n\n  return {\n      isNow:()=>isNow(st, fn)\n    , isPast:()=> isPast(fn)\n    , setNowOrPast:(now, past=\"\", fallback=\"\")=>{\n      if(!_.isNull(now) && isNow(st, fn)) return now;\n      if(isPast(fn)) return past;\n      return fallback;\n    }\n\n  }\n}\n"]}