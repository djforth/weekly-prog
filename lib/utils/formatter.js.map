{"version":3,"sources":["../../src/utils/formatter.js"],"names":["moment","_","partial","includes","getFormat","col","has","fmt","type","displayData","data","isDate","strftime","getValue","item","keys","isUndefined","isString","get","values","map","key","concatValues","concat","val","d","join","split","value"],"mappings":";AACA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,CAAP,MAAc,aAAd;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACCD,EAAEC,OAAF,GAAYA,OAAZ;AACD,OAAOC,QAAP,MAAqB,iBAArB;AACCF,EAAEE,QAAF,GAAaA,QAAb;;AAED,SAASC,SAAT,CAAmBC,GAAnB,EAAuB;AACrB,MAAIJ,EAAEK,GAAF,CAAMD,GAAN,EAAW,KAAX,CAAJ,EAAuB,OAAOA,IAAIE,GAAX;;AAEvB,MAAIN,EAAEK,GAAF,CAAMD,GAAN,EAAW,MAAX,KAAsBA,IAAIG,IAAJ,KAAa,UAAvC,EAAkD;AAChD,WAAO,gBAAP;AACD;;AAED,SAAO,UAAP;AACD;;AAED,SAASC,WAAT,CAAqBC,IAArB,EAA2BL,GAA3B,EAA+B;AAC7B,MAAI,CAACJ,EAAEU,MAAF,CAASD,IAAT,CAAL,EAAsB,OAAOA,IAAP;AACtB,SAAOV,OAAOU,IAAP,EAAaE,QAAb,CAAsBR,UAAUC,GAAV,CAAtB,CAAP;AACD;;AAED,SAASQ,QAAT,CAAkBC,IAAlB,EAAuB;AACrB,MAAIJ,OAAOI,IAAX;AACA,SAAO,UAASC,IAAT,EAAc;AACnB,QAAId,EAAEe,WAAF,CAAcD,IAAd,CAAJ,EAAyB,OAAO,IAAP;AACzB,QAAId,EAAEgB,QAAF,CAAWF,IAAX,CAAJ,EAAsB,OAAOL,KAAKQ,GAAL,CAASH,IAAT,CAAP;AACtB,QAAII,SAAUJ,KAAKK,GAAL,CAAS,UAASC,GAAT,EAAa;AAClC,aAAOX,KAAKQ,GAAL,CAASG,GAAT,CAAP;AACD,KAFa,CAAd;;AAIA,WAAOF,MAAP;AACD,GARD;AASD;;AAED,SAASG,YAAT,CAAsBR,IAAtB,EAA4BT,GAA5B,EAAgC;AAC9B,MAAIkB,SAAST,KAAK,CAACT,IAAIgB,GAAL,EAAUhB,IAAIkB,MAAd,CAAL,CAAb;AACA,MAAIC,MAAMvB,EAAEmB,GAAF,CAAMG,MAAN,EAAc,UAACE,CAAD,EAAK;AAC3B,QAAIf,OAAOD,YAAYgB,CAAZ,EAAepB,GAAf,CAAX;;AAEA,WAAOK,IAAP;AACD,GAJS,CAAV;;AAMA,SAAOc,IAAIE,IAAJ,OAAarB,IAAIsB,KAAjB,OAAP;AACD;;AAED,eAAe,UAASb,IAAT,EAAc;AAC3B,MAAIc,QAAQf,SAASC,IAAT,CAAZ;;AAEA,SAAO,UAAST,GAAT,EAAa;AAClB,WAAQJ,EAAEK,GAAF,CAAMD,GAAN,EAAW,QAAX,CAAD,GAAyBiB,aAAaM,KAAb,EAAoBvB,GAApB,CAAzB,GAAoDuB,MAAMvB,IAAIgB,GAAV,CAA3D;AACD,GAFD;AAGD","file":"formatter.js","sourcesContent":["\nimport moment from 'moment-strftime';\nimport _ from 'lodash/core';\nimport partial from 'lodash/partial';\n _.partial = partial;\nimport includes from 'lodash/includes';\n _.includes = includes;\n\nfunction getFormat(col){\n  if (_.has(col, 'fmt')) return col.fmt;\n\n  if (_.has(col, 'type') && col.type === 'dateTime'){\n    return '%d/%m/%Y %H:%M';\n  }\n\n  return '%d/%m/%Y';\n}\n\nfunction displayData(data, col){\n  if (!_.isDate(data))  return data;\n  return moment(data).strftime(getFormat(col));\n}\n\nfunction getValue(item){\n  var data = item;\n  return function(keys){\n    if (_.isUndefined(keys)) return null;\n    if (_.isString(keys)) return data.get(keys);\n    let values =  keys.map(function(key){\n      return data.get(key);\n    });\n\n    return values;\n  };\n}\n\nfunction concatValues(item, col){\n  let concat = item([col.key, col.concat]);\n  let val = _.map(concat, (d)=>{\n    let data = displayData(d, col);\n\n    return data;\n  });\n\n  return val.join(` ${col.split} `);\n}\n\nexport default function(item){\n  let value = getValue(item);\n\n  return function(col){\n    return (_.has(col, 'concat')) ? concatValues(value, col) : value(col.key);\n  };\n};\n"]}