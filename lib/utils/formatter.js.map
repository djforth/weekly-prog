{"version":3,"sources":["../../src/utils/formatter.js"],"names":[],"mappings":";;AAAA,IAAM,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC;IACnC,CAAC,GAAQ,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAGjC,SAAS,SAAS,CAAC,GAAG,EAAC;AACrB,MAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,EAAC;AACnB,WAAO,GAAG,CAAC,GAAG,CAAC;GAChB;;AAED,MAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,EAAE;AACrB,QAAG,GAAG,CAAC,IAAI,KAAK,UAAU,EAAC;AACzB,aAAO,gBAAgB,CAAC;KACzB;AACD,QAAG,GAAG,CAAC,IAAI,KAAK,MAAM,EAAC;AACrB,aAAO,UAAU,CAAC;KACnB;GACF;;AAED,SAAO,UAAU,CAAC;CACnB;;AAED,SAAS,WAAW,CAAC,IAAI,EAAE,GAAG,EAAC;AAC7B,MAAG,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC;AAChC,SAAO,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;CAC9C;;AAKD,SAAS,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAC;AAC3B,MAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAC3C,SAAO,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,UAAC,GAAG,EAAG;AACxB,WAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;GACtB,CAAC,CAAA;CACH;;AAGD,SAAS,YAAY,CAAC,IAAI,EAAE,GAAG,EAAC;AAC9B,MAAI,MAAM,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;AACzC,SAAO,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,UAAC,CAAC,EAAG;AACxB,WAAO,WAAW,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;GAC5B,CAAC,CAAC,IAAI,OAAK,GAAG,CAAC,KAAK,OAAI,CAAC;CAC3B;;AAID,MAAM,CAAC,OAAO,GAAG,UAAS,IAAI,EAAC;AAC7B,MAAI,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;;AAEtC,SAAO,UAAC,GAAG,EAAG;AACZ,WAAO,AAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAI,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;GAC3E,CAAA;CACF,CAAA","file":"formatter.js","sourcesContent":["const moment = require('moment-strftime')\n    , _      = require(\"lodash\");\n\n\nfunction getFormat(col){\n  if(_.has(col, \"fmt\")){\n    return col.fmt;\n  }\n\n  if(_.has(col, \"type\") ){\n    if(col.type === \"dateTime\"){\n      return \"%d/%m/%Y %H:%M\";\n    }\n    if(col.type === \"date\"){\n      return \"%d/%m/%Y\";\n    }\n  }\n\n  return \"%d/%m/%Y\";\n}\n\nfunction displayData(data, col){\n  if(!_.isDate(data)) return data;\n  return moment(data).strftime(getFormat(col));\n}\n\n\n\n\nfunction getValue(item, keys){\n  if(_.isString(keys)) return item.get(keys);\n  return _.map(keys, (key)=>{\n    return item.get(key);\n  })\n}\n\n\nfunction concatValues(item, col){\n  let concat = item([col.key, col.concat]);\n  return _.map(concat, (d)=>{\n    return displayData(d, col);\n  }).join(` ${col.split} `);\n}\n\n\n\nmodule.exports = function(item){\n  let value = _.partial(getValue, item);\n\n  return (col)=>{\n    return (_.has(col, \"concat\")) ? concatValues(value, col) : value(col.key);\n  }\n}\n"]}