{"version":3,"sources":["../../src/utils/formatter.js"],"names":["getFormat","col","has","fmt","type","displayData","data","isDate","strftime","getValue","item","keys","isUndefined","isString","get","values","map","key","concatValues","concat","val","d","join","split","value","partial","includes"],"mappings":"6dAMA,QAASA,UAAT,CAAmBC,GAAnB,CAAuB,OACjB,kBAAEC,GAAF,CAAMD,GAAN,CAAW,KAAX,CADiB,CACSA,IAAIE,GADb,CAGjB,iBAAED,GAAF,CAAMD,GAAN,CAAW,MAAX,GAAmC,UAAb,OAAIG,IAHT,CAIZ,gBAJY,CAOd,UACR,CAED,QAASC,YAAT,CAAqBC,IAArB,CAA2BL,GAA3B,CAA+B,OACxB,kBAAEM,MAAF,CAASD,IAAT,CADwB,CAEtB,6BAAOA,IAAP,EAAaE,QAAb,CAAsBR,UAAUC,GAAV,CAAtB,CAFsB,CACAK,IAE9B,CAED,QAASG,SAAT,CAAkBC,IAAlB,CAAuB,CACrB,GAAIJ,MAAOI,IAAX,CACA,MAAO,UAASC,IAAT,CAAc,CACnB,GAAI,iBAAEC,WAAF,CAAcD,IAAd,CAAJ,CAAyB,MAAO,KAAP,CACzB,GAAI,iBAAEE,QAAF,CAAWF,IAAX,CAAJ,CAAsB,MAAOL,MAAKQ,GAAL,CAASH,IAAT,CAAP,CACtB,GAAII,QAAUJ,KAAKK,GAAL,CAAS,SAASC,GAAT,CAAa,CAClC,MAAOX,MAAKQ,GAAL,CAASG,GAAT,CACR,CAFa,CAAd,CAIA,MAAOF,OACR,CACF,CAED,QAASG,aAAT,CAAsBR,IAAtB,CAA4BT,GAA5B,CAAgC,CAC9B,GAAIkB,QAAST,KAAK,CAACT,IAAIgB,GAAL,CAAUhB,IAAIkB,MAAd,CAAL,CAAb,CACIC,IAAM,iBAAEJ,GAAF,CAAMG,MAAN,CAAc,SAACE,CAAD,CAAK,CAC3B,GAAIf,MAAOD,YAAYgB,CAAZ,CAAepB,GAAf,CAAX,CAEA,MAAOK,KACR,CAJS,CADV,CAOA,MAAOc,KAAIE,IAAJ,KAAarB,IAAIsB,KAAjB,KACR,C,uEAEc,SAASb,IAAT,CAAc,CAC3B,GAAIc,OAAQf,SAASC,IAAT,CAAZ,CAEA,MAAO,UAAST,GAAT,CAAa,CAClB,MAAQ,kBAAEC,GAAF,CAAMD,GAAN,CAAW,QAAX,CAAD,CAAyBiB,aAAaM,KAAb,CAAoBvB,GAApB,CAAzB,CAAoDuB,MAAMvB,IAAIgB,GAAV,CAC5D,CACF,C,uGAhDD,iBAAEQ,OAAF,gB,CACA,iBAAEC,QAAF,iB","file":"formatter.js","sourcesContent":[" import moment from 'moment-strftime';\n import _, {includes, partial} from 'lodash';\n\n_.partial = partial;\n_.includes = includes;\n\nfunction getFormat(col){\n  if (_.has(col, 'fmt')) return col.fmt;\n\n  if (_.has(col, 'type') && col.type === 'dateTime'){\n    return '%d/%m/%Y %H:%M';\n  }\n\n  return '%d/%m/%Y';\n}\n\nfunction displayData(data, col){\n  if (!_.isDate(data))  return data;\n  return moment(data).strftime(getFormat(col));\n}\n\nfunction getValue(item){\n  let data = item;\n  return function(keys){\n    if (_.isUndefined(keys)) return null;\n    if (_.isString(keys)) return data.get(keys);\n    let values =  keys.map(function(key){\n      return data.get(key);\n    });\n\n    return values;\n  };\n}\n\nfunction concatValues(item, col){\n  let concat = item([col.key, col.concat]);\n  let val = _.map(concat, (d)=>{\n    let data = displayData(d, col);\n\n    return data;\n  });\n\n  return val.join(` ${col.split} `);\n}\n\nexport default function(item){\n  let value = getValue(item);\n\n  return function(col){\n    return (_.has(col, 'concat')) ? concatValues(value, col) : value(col.key);\n  };\n};\n"]}