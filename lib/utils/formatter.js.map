{"version":3,"sources":["../../src/utils/formatter.js"],"names":[],"mappings":";;AAAA,IAAM,SAAS,QAAQ,iBAAR,CAAT;IACA,IAAS,QAAQ,QAAR,CAAT;;AAGN,SAAS,SAAT,CAAmB,GAAnB,EAAuB;AACrB,MAAG,EAAE,GAAF,CAAM,GAAN,EAAW,KAAX,CAAH,EAAqB;AACnB,WAAO,IAAI,GAAJ,CADY;GAArB;;AAIA,MAAG,EAAE,GAAF,CAAM,GAAN,EAAW,MAAX,CAAH,EAAuB;AACrB,QAAG,IAAI,IAAJ,KAAa,UAAb,EAAwB;AACzB,aAAO,gBAAP,CADyB;KAA3B;AAGA,QAAG,IAAI,IAAJ,KAAa,MAAb,EAAoB;AACrB,aAAO,UAAP,CADqB;KAAvB;GAJF;;AASA,SAAO,UAAP,CAdqB;CAAvB;;AAiBA,SAAS,WAAT,CAAqB,IAArB,EAA2B,GAA3B,EAA+B;AAC7B,MAAG,CAAC,EAAE,MAAF,CAAS,IAAT,CAAD,EAAiB,OAAO,IAAP,CAApB;AACA,SAAO,OAAO,IAAP,EAAa,QAAb,CAAsB,UAAU,GAAV,CAAtB,CAAP,CAF6B;CAA/B;;AAQA,SAAS,QAAT,CAAkB,IAAlB,EAAwB,IAAxB,EAA6B;AAC3B,MAAG,EAAE,QAAF,CAAW,IAAX,CAAH,EAAqB,OAAO,KAAK,GAAL,CAAS,IAAT,CAAP,CAArB;AACA,SAAO,EAAE,GAAF,CAAM,IAAN,EAAY,UAAC,GAAD,EAAO;AACxB,WAAO,KAAK,GAAL,CAAS,GAAT,CAAP,CADwB;GAAP,CAAnB,CAF2B;CAA7B;;AAQA,SAAS,YAAT,CAAsB,IAAtB,EAA4B,GAA5B,EAAgC;AAC9B,MAAI,SAAS,KAAK,CAAC,IAAI,GAAJ,EAAS,IAAI,MAAJ,CAAf,CAAT,CAD0B;AAE9B,SAAO,EAAE,GAAF,CAAM,MAAN,EAAc,UAAC,CAAD,EAAK;AACxB,WAAO,YAAY,CAAZ,EAAe,GAAf,CAAP,CADwB;GAAL,CAAd,CAEJ,IAFI,OAEK,IAAI,KAAJ,MAFL,CAAP,CAF8B;CAAhC;;AASA,OAAO,OAAP,GAAiB,UAAS,IAAT,EAAc;AAC7B,MAAI,QAAQ,EAAE,OAAF,CAAU,QAAV,EAAoB,IAApB,CAAR,CADyB;;AAG7B,SAAO,UAAC,GAAD,EAAO;AACZ,WAAO,CAAC,CAAE,GAAF,CAAM,GAAN,EAAW,QAAX,CAAD,GAAyB,aAAa,KAAb,EAAoB,GAApB,CAAzB,GAAoD,MAAM,IAAI,GAAJ,CAA1D,CADK;GAAP,CAHsB;CAAd","file":"formatter.js","sourcesContent":["const moment = require('moment-strftime')\n    , _      = require(\"lodash\");\n\n\nfunction getFormat(col){\n  if(_.has(col, \"fmt\")){\n    return col.fmt;\n  }\n\n  if(_.has(col, \"type\") ){\n    if(col.type === \"dateTime\"){\n      return \"%d/%m/%Y %H:%M\";\n    }\n    if(col.type === \"date\"){\n      return \"%d/%m/%Y\";\n    }\n  }\n\n  return \"%d/%m/%Y\";\n}\n\nfunction displayData(data, col){\n  if(!_.isDate(data)) return data;\n  return moment(data).strftime(getFormat(col));\n}\n\n\n\n\nfunction getValue(item, keys){\n  if(_.isString(keys)) return item.get(keys);\n  return _.map(keys, (key)=>{\n    return item.get(key);\n  })\n}\n\n\nfunction concatValues(item, col){\n  let concat = item([col.key, col.concat]);\n  return _.map(concat, (d)=>{\n    return displayData(d, col);\n  }).join(` ${col.split} `);\n}\n\n\n\nmodule.exports = function(item){\n  let value = _.partial(getValue, item);\n\n  return (col)=>{\n    return (_.has(col, \"concat\")) ? concatValues(value, col) : value(col.key);\n  }\n}\n"]}