{"version":3,"sources":["../../src/utils/sessions_breaker.js"],"names":["createKey","date","getFullYear","getMonth","getDate","groupSessions","sessions","new_sessions","sortBy","s","groupBy","groups","ses","first","isUndefined","isEmpty","key","forEach","session","push","makeDates","map","toDate","addDay","clone","currentDates","dates","d","test","check","isSame","fillGaps","start","end","values","add","isBefore","st","list"],"mappings":"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","file":"sessions_breaker.js","sourcesContent":["import Moment from 'moment-strftime';\nimport _ from 'lodash';\nimport checker from './day_checker';\n\nfunction createKey(date){\n  return `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n}\n\nfunction groupSessions(sessions){\n  let new_sessions = _.sortBy(sessions, (s)=>s.groupBy);\n  let groups   = {};\n  let ses      = _.first(new_sessions);\n  if (_.isUndefined(ses) || _.isEmpty(ses)) return groups;\n  let date     = _.first(new_sessions).groupBy;\n  let key      = createKey(date);\n\n  groups[key] = {date: date, sessions: []};\n  _.forEach(new_sessions, (session)=>{\n    if (checker(date, session.groupBy)){\n      groups[key].sessions.push(session);\n    } else {\n      date = session.groupBy;\n      key  = createKey(date);\n      groups[key] = {date: date, sessions: [session]};\n    }\n\n    return groups;\n  });\n\n  return groups;\n}\n\nfunction makeDates(sessions, key){\n  return _.map(sessions, (s)=>{\n    let date     = Moment(s[key]);\n\n    s.groupBy = date.toDate();\n\n    return s;\n  });\n}\n\nfunction addDay(groups, date){\n  let key  = createKey(date.toDate());\n  groups[key] = {date: date.clone().toDate(), sessions: []};\n\n  return groups;\n}\n\nfunction currentDates(dates){\n  dates = _.map(dates, (d)=>{\n    return Moment(d);\n  });\n\n  return function(test){\n    let check = false;\n    _.forEach(dates, (d)=>{\n      if (d.isSame(test, 'd')){\n        check = true;\n        return false;\n      }\n    });\n\n    return check;\n  };\n}\n\nfunction fillGaps(groups, start, end = 7){\n  let dates = currentDates(_.map(_.values(groups), 'date'));\n  start = (_.isUndefined(start)) ? _.first(dates) : start;\n  start = Moment(start);\n  end = start.clone().add(end, 'd');\n\n  do {\n    if (!dates(start)){\n      groups = addDay(groups, start);\n    }\n    start.add(1, 'd');\n  } while (start.isBefore(end));\n  return groups;\n}\n\nexport default function(sessions, groupBy, st){\n  let list = makeDates(sessions, groupBy);\n  let groups = groupSessions(list);\n  return fillGaps(groups, st);\n};\n"]}