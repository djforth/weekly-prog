{"version":3,"sources":["../../src/utils/sessions_breaker.js"],"names":[],"mappings":"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","file":"sessions_breaker.js","sourcesContent":["const Moment        = require('moment-strftime');\n\nconst _        = require('lodash/core');\n\nvar checker       = require('./day_checker');\n\nfunction createKey(date){\n  return `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n}\n\nfunction groupSessions(sessions){\n  let new_sessions = _.sortBy(sessions, (s)=>s.groupBy);\n  let groups   = {};\n  let ses      = _.first(new_sessions);\n  if (_.isUndefined(ses) || _.isEmpty(ses)) return groups;\n  let date     = _.first(new_sessions).groupBy;\n  let key      = createKey(date);\n\n  groups[key] = {date: date, sessions: []};\n  _.forEach(new_sessions, (session)=>{\n    if (checker(date, session.groupBy)){\n      groups[key].sessions.push(session);\n    } else {\n      date = session.groupBy;\n      key  = createKey(date);\n      groups[key] = {date: date, sessions: [session]};\n    }\n\n    return groups;\n  });\n\n  return groups;\n}\n\nfunction makeDates(sessions, key){\n  return _.map(sessions, (s)=>{\n    let date     = Moment(s[key]);\n\n    s.groupBy = date.toDate();\n\n    return s;\n  });\n}\n\nfunction addDay(groups, date){\n  let key  = createKey(date.toDate());\n  groups[key] = {date: date.clone().toDate(), sessions: []};\n\n  return groups;\n}\n\nfunction currentDates(dates){\n  dates = _.map(dates, (d)=>{\n    return Moment(d);\n  });\n\n  return function(test){\n    let check = false;\n    _.forEach(dates, (d)=>{\n      if (d.isSame(test, 'd')){\n        check = true;\n        return false;\n      }\n    });\n\n    return check;\n  };\n}\n\nfunction fillGaps(groups, start, end = 7){\n  let dates = currentDates(_.map(_.values(groups), 'date'));\n  start = (_.isUndefined(start)) ? _.first(dates) : start;\n  start = Moment(start);\n  end = start.clone().add(end, 'd');\n\n  do {\n    if (!dates(start)){\n      groups = addDay(groups, start);\n    }\n    start.add(1, 'd');\n  } while (start.isBefore(end));\n  return groups;\n}\n\nmodule.exports = function(sessions, groupBy, st){\n  let list = makeDates(sessions, groupBy);\n  let groups = groupSessions(list);\n  return fillGaps(groups, st);\n};\n"]}