{"version":3,"sources":["../../src/utils/sessions_breaker.js"],"names":["Moment","_","checker","createKey","date","getFullYear","getMonth","getDate","groupSessions","sessions","new_sessions","sortBy","s","groupBy","groups","ses","first","isUndefined","isEmpty","key","forEach","session","push","makeDates","map","toDate","addDay","clone","currentDates","dates","d","test","check","isSame","fillGaps","start","end","values","add","isBefore","st","list"],"mappings":"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","file":"sessions_breaker.js","sourcesContent":["import Moment from 'moment-strftime';\nimport _ from 'lodash/core';\nimport checker from './day_checker';\n\nfunction createKey(date){\n  return `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n}\n\nfunction groupSessions(sessions){\n  let new_sessions = _.sortBy(sessions, (s)=>s.groupBy);\n  let groups   = {};\n  let ses      = _.first(new_sessions);\n  if (_.isUndefined(ses) || _.isEmpty(ses)) return groups;\n  let date     = _.first(new_sessions).groupBy;\n  let key      = createKey(date);\n\n  groups[key] = {date: date, sessions: []};\n  _.forEach(new_sessions, (session)=>{\n    if (checker(date, session.groupBy)){\n      groups[key].sessions.push(session);\n    } else {\n      date = session.groupBy;\n      key  = createKey(date);\n      groups[key] = {date: date, sessions: [session]};\n    }\n\n    return groups;\n  });\n\n  return groups;\n}\n\nfunction makeDates(sessions, key){\n  return _.map(sessions, (s)=>{\n    let date     = Moment(s[key]);\n\n    s.groupBy = date.toDate();\n\n    return s;\n  });\n}\n\nfunction addDay(groups, date){\n  let key  = createKey(date.toDate());\n  groups[key] = {date: date.clone().toDate(), sessions: []};\n\n  return groups;\n}\n\nfunction currentDates(dates){\n  dates = _.map(dates, (d)=>{\n    return Moment(d);\n  });\n\n  return function(test){\n    let check = false;\n    _.forEach(dates, (d)=>{\n      if (d.isSame(test, 'd')){\n        check = true;\n        return false;\n      }\n    });\n\n    return check;\n  };\n}\n\nfunction fillGaps(groups, start, end = 7){\n  let dates = currentDates(_.map(_.values(groups), 'date'));\n  start = (_.isUndefined(start)) ? _.first(dates) : start;\n  start = Moment(start);\n  end = start.clone().add(end, 'd');\n\n  do {\n    if (!dates(start)){\n      groups = addDay(groups, start);\n    }\n    start.add(1, 'd');\n  } while (start.isBefore(end));\n  return groups;\n}\n\nexport default function(sessions, groupBy, st){\n  let list = makeDates(sessions, groupBy);\n  let groups = groupSessions(list);\n  return fillGaps(groups, st);\n};\n"]}